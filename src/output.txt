./app/admin/new/page.tsx
import { Category, Ring } from "@prisma/client";
import { createTechDraft } from "@/lib/radar";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";

async function createDraftAction(formData: FormData) {
    "use server";

    const name = formData.get("name")?.toString().trim() || "";
    const category = (formData.get("category")?.toString() || "Tools") as Category;
    const ring = (formData.get("ring")?.toString() || "Assess") as Ring;
    const techDescription = formData.get("techDescription")?.toString().trim() || "";
    const classificationNote = formData.get("classificationNote")?.toString().trim() || "";

    if (!name) {
        throw new Error("Name ist erforderlich.");
    }
    if (!techDescription) {
        throw new Error("Beschreibung ist erforderlich.");
    }

    await createTechDraft({ name, category, techDescription, ring, classificationNote });

    revalidatePath("/"); // passe an, falls deine Liste auf /radar oder /admin ist
    redirect("/");       // Zielseite anpassen (z. B. "/admin" oder "/radar")
}

export default function Page() {
    const categories = Object.values(Category); // ["Techniques","Platforms","Tools","Languages & Frameworks", ...]
    const rings = Object.values(Ring);

    return (
        <main className="mx-auto max-w-xl px-4 py-10">
            <h1 className="mb-6 text-2xl font-semibold tracking-tight">Neue Technologie als Draft</h1>

            <form action={createDraftAction} className="space-y-4 rounded-xl border bg-white p-5 shadow-sm">
                <div>
                    <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                        Name *
                    </label>
                    <input
                        id="name"
                        name="name"
                        required
                        className="mt-1 w-full rounded-lg border px-3 py-2 text-gray-900 focus:outline-none focus:ring"
                        placeholder="z. B. Argo CD"
                    />
                </div>

                <div>
                    <label htmlFor="category" className="block text-sm font-medium text-gray-700">
                        Kategorie *
                    </label>
                    <select
                        id="category"
                        name="category"
                        className="mt-1 w-full rounded-lg border bg-white px-3 py-2 text-gray-900 focus:outline-none focus:ring"
                        defaultValue={Category.Tools}
                    >
                        {categories.map((c) => (
                            <option key={c as string} value={c as string}>
                                {String(c)}
                            </option>
                        ))}
                    </select>
                </div>

                <div>
                    <label htmlFor="techDescription" className="block text-sm font-medium text-gray-700">
                        Technologie-Beschreibung *
                    </label>
                    <textarea
                        id="techDescription"
                        name="techDescription"
                        required
                        rows={4}
                        className="mt-1 w-full rounded-lg border px-3 py-2 text-gray-900 focus:outline-none focus:ring"
                        placeholder="Kurzbeschreibung der Technologie‚Ä¶"
                    />
                </div>

                <div>
                    <label htmlFor="ring" className="block text-sm font-medium text-gray-700">
                        Ring *
                    </label>
                    <select
                        id="ring"
                        name="ring"
                        className="mt-1 w-full rounded-lg border bg-white px-3 py-2 text-gray-900 focus:outline-none focus:ring"
                        defaultValue={Ring.Assess}
                    >
                        {rings.map((r) => (
                            <option key={r as string} value={r as string}>
                                {String(r)}
                            </option>
                        ))}
                    </select>
                </div>

                <div>
                    <label htmlFor="classificationNote" className="block text-sm font-medium text-gray-700">
                        Beschreibung der Einordnung *
                    </label>
                    <textarea
                        id="classificationNote"
                        name="classificationNote"
                        required
                        rows={4}
                        className="mt-1 w-full rounded-lg border px-3 py-2 text-gray-900 focus:outline-none focus:ring"
                        placeholder="Kurzbeschreibung der Technologie‚Ä¶"
                    />
                </div>

                <div className="pt-2">
                    <button
                        type="submit"
                        className="rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700"
                    >
                        Draft anlegen
                    </button>
                </div>
            </form>
        </main>
    );
}
./app/admin/manage/page.tsx
import { listAllTech, updateTechSmart, isPublishable, getTechById } from "@/lib/radar";
import { Category, Ring, Status } from "@prisma/client";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";

function getStr(fd: FormData, key: string) {
    const v = fd.get(key);
    return typeof v === "string" ? v : "";
}

async function updateOneAction(formData: FormData) {
    "use server";

    const id = getStr(formData, "id");
    if (!id) throw new Error("ID fehlt.");

    const name = getStr(formData, "name").trim();
    const category = getStr(formData, "category") as Category;
    const ringRaw = getStr(formData, "ring");
    const techDescription = getStr(formData, "techDescription").trim();
    const classificationNote = getStr(formData, "classificationNote").trim();
    const status = getStr(formData, "status") as Status;

    if (!name || !techDescription || !category || !status) {
        redirect(`/admin/manage?msg=${encodeURIComponent("Bitte Pflichtfelder ausf√ºllen.")}&type=error`);
    }

    const publishable = isPublishable({
        ring: ringRaw ? (ringRaw as Ring) : null,
        classificationNote: classificationNote || null,
    });

    let nextStatus: Status = status;
    if (status === Status.Published && !publishable) {
        const before = await getTechById(id);
        nextStatus = before?.status ?? Status.Draft;
    }

    await updateTechSmart(id, {
        name,
        category,
        ring: ringRaw ? (ringRaw as Ring) : null,
        techDescription,
        classificationNote: classificationNote || null,
        status: nextStatus,
    });

    revalidatePath("/admin/manage");
    revalidatePath("/");
    revalidatePath("/radar");

    const msg =
        status === Status.Published && !publishable
            ? "Nicht publiziert: Bitte Ring & Einordnung erg√§nzen."
            : "Gespeichert.";
    const type = status === Status.Published && !publishable ? "warn" : "success";

    redirect(`/admin/manage?msg=${encodeURIComponent(msg)}&type=${type}${""}`);
}

type Tech = Awaited<ReturnType<typeof listAllTech>>[number];

export default async function ManageAllTechPage({
    searchParams,
}: Readonly<{
    searchParams: Promise<{ q?: string; msg?: string; type?: "success" | "warn" | "error" }>;
}>) {
    const sp = await searchParams;
    const q = sp?.q?.trim() || "";
    const items = await listAllTech(q);

    const categories = Object.values(Category);
    const rings = Object.values(Ring);
    const statuses = Object.values(Status);

    let bannerClass = "border-rose-200 bg-rose-50 text-rose-800";
    if (sp?.type === "success") {
        bannerClass = "border-emerald-200 bg-emerald-50 text-emerald-800";
    } else if (sp?.type === "warn") {
        bannerClass = "border-amber-200 bg-amber-50 text-amber-800";
    }

    return (
        <main className="mx-auto max-w-4xl px-4 py-8">
            <header className="mb-4 space-y-3">
                <h1 className="text-2xl font-semibold tracking-tight">Alle Technologien verwalten</h1>

                <form className="flex gap-2" action="/admin/manage" method="get">
                    <input
                        type="search"
                        name="q"
                        defaultValue={q}
                        placeholder="Suchen ‚Ä¶ (Name, Kategorie, Ring, Beschreibung)"
                        className="w-full rounded-lg border px-3 py-2"
                        aria-label="Eintr√§ge durchsuchen"
                    />
                    <button className="rounded-lg border px-3 py-2 hover:bg-gray-50" type="submit">
                        Suchen
                    </button>
                </form>

                {sp?.msg && (
                    <output aria-live="polite" className={`mt-1 block rounded-lg border px-4 py-2 text-sm ${bannerClass}`}>
                        {sp.msg}
                    </output>
                )}
            </header>

            <section className="space-y-4">
                {items.length === 0 ? (
                    <div className="rounded-2xl border border-dashed p-10 text-center text-gray-500">
                        <div className="mx-auto mb-3 flex h-10 w-10 items-center justify-center rounded-full bg-gray-100">
                            <span aria-hidden>üì≠</span>
                        </div>
                        <p className="font-medium">
                            {q ? "Keine Treffer f√ºr deine Suche." : "Keine Eintr√§ge vorhanden."}
                        </p>
                    </div>
                ) : (
                    items.map((t: Tech) => {
                        const nameId = `name-${t.id}`;
                        const statusId = `status-${t.id}`;
                        const categoryId = `category-${t.id}`;
                        const ringId = `ring-${t.id}`;
                        const noteId = `classificationNote-${t.id}`;
                        const descId = `techDescription-${t.id}`;

                        return (
                            <form key={t.id} action={updateOneAction} className="rounded-xl border bg-white p-4 shadow-sm">
                                <input type="hidden" name="id" value={t.id} />

                                <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
                                    <div className="flex-1">
                                        <label className="sr-only" htmlFor={nameId}>
                                            Name
                                        </label>
                                        <input
                                            id={nameId}
                                            name="name"
                                            defaultValue={t.name}
                                            required
                                            className="w-full rounded-lg border px-3 py-2 text-lg font-medium"
                                        />
                                        <p className="mt-1 text-xs text-gray-500">
                                            {t.category} ‚Ä¢ {t.ring ?? "kein Ring"}
                                            {t.publishedAt ? ` ‚Ä¢ publiziert am ${new Date(t.publishedAt).toLocaleDateString()}` : ""}
                                        </p>
                                    </div>

                                    <div>
                                        <label className="mb-1 block text-sm font-medium text-gray-700" htmlFor={statusId}>
                                            Status
                                        </label>
                                        <select id={statusId} name="status" defaultValue={t.status} className="rounded-lg border bg-white px-3 py-2 text-sm">
                                            {statuses.map((s) => (
                                                <option key={s as string} value={s as string}>
                                                    {String(s)}
                                                </option>
                                            ))}
                                        </select>
                                    </div>
                                </div>

                                <div className="mt-4 grid grid-cols-1 gap-4 md:grid-cols-2">
                                    <div>
                                        <label className="mb-1 block text-sm font-medium text-gray-700" htmlFor={categoryId}>
                                            Kategorie
                                        </label>
                                        <select id={categoryId} name="category" defaultValue={t.category} className="w-full rounded-lg border bg-white px-3 py-2">
                                            {categories.map((c) => (
                                                <option key={c as string} value={c as string}>
                                                    {String(c)}
                                                </option>
                                            ))}
                                        </select>
                                    </div>

                                    <div>
                                        <label className="mb-1 block text-sm font-medium text-gray-700" htmlFor={ringId}>
                                            Ring
                                        </label>
                                        <select id={ringId} name="ring" defaultValue={t.ring ?? ""} className="w-full rounded-lg border bg-white px-3 py-2">
                                            <option value="">‚Äî</option>
                                            {rings.map((r) => (
                                                <option key={r as string} value={r as string}>
                                                    {String(r)}
                                                </option>
                                            ))}
                                        </select>
                                    </div>

                                    <div className="md:col-span-2">
                                        <label className="mb-1 block text-sm font-medium text-gray-700" htmlFor={noteId}>
                                            Einordnung
                                        </label>
                                        <input
                                            id={noteId}
                                            name="classificationNote"
                                            defaultValue={t.classificationNote ?? ""}
                                            className="w-full rounded-lg border px-3 py-2"
                                            placeholder="Kurzbegr√ºndung‚Ä¶"
                                        />
                                    </div>

                                    <div className="md:col-span-2">
                                        <label className="mb-1 block text-sm font-medium text-gray-700" htmlFor={descId}>
                                            Beschreibung *
                                        </label>
                                        <textarea
                                            id={descId}
                                            name="techDescription"
                                            required
                                            rows={4}
                                            defaultValue={t.techDescription ?? ""}
                                            className="w-full rounded-lg border px-3 py-2"
                                        />
                                    </div>
                                </div>

                                <div className="mt-4 flex justify-end">
                                    <button type="submit" className="rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700">
                                        Speichern
                                    </button>
                                </div>
                            </form>
                        );
                    })
                )}
            </section>
        </main>
    );
}
./app/admin/page.tsx
import Link from "next/link";

export default function Index({ Component, pageProps }: any) {
    return (
        <main className="mx-auto max-w-4xl px-4 py-8">
            <div className="pt-2">
                <Link href="/admin/new">
                    <button type="button" className="rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700">
                        Neue Technologie erfassen
                    </button>
                </Link>
            </div>
            <div className="pt-2">
                <Link href="/admin/manage">
                    <button type="button" className="rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700">
                        Technologien verwalten
                    </button>
                </Link>
            </div>
        </main>


    )
}./app/signin/login-form.tsx
"use client";

import { useState } from "react";
import { signIn } from "next-auth/react";

export default function LoginForm({ callbackUrl = "/" }: { readonly callbackUrl?: string }) {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [showPw, setShowPw] = useState(false);
    const [submitting, setSubmitting] = useState(false);
    const [error, setError] = useState<string | null>(null);

    async function onSubmit(e: React.FormEvent) {
        e.preventDefault();
        setSubmitting(true);
        setError(null);
        const res = await signIn("credentials", { email, password, redirect: false, callbackUrl });
        setSubmitting(false);

        if (res?.ok && !res.error) window.location.href = res.url ?? callbackUrl;
        else if (res?.error === "CredentialsSignin") setError("E-Mail oder Passwort ist falsch.");
        else if (res?.error) setError(`Fehler bei der Anmeldung: ${res.error}`);
        else setError("Login fehlgeschlagen. Bitte sp√§ter erneut versuchen.");
    }

    return (
        <form onSubmit={onSubmit} className="grid gap-3">
            <div className="grid gap-1">
                <label htmlFor="email">E-Mail</label>
                <input
                    id="email"
                    data-testid="email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="border rounded p-2"
                    required
                />
            </div>

            <div className="grid gap-1">
                <label htmlFor="password">Passwort</label>
                <input
                    id="password"
                    data-testid="password"
                    type={showPw ? "text" : "password"}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="border rounded p-2"
                    required
                />
                {/* Checkbox NICHT im gleichen <label>, eigenes Label via htmlFor */}
                <div className="flex items-center gap-2 text-sm mt-1">
                    <input
                        id="showPw"
                        type="checkbox"
                        checked={showPw}
                        onChange={() => setShowPw(!showPw)}
                    />
                    <label htmlFor="showPw">Passwort anzeigen</label>
                </div>
            </div>

            {error && <p className="text-sm text-red-600">{error}</p>}

            <button type="submit" className="rounded px-4 py-2 border hover:bg-gray-50" disabled={submitting}>
                {submitting ? "Anmelden‚Ä¶" : "Anmelden"}
            </button>
        </form>
    );
}
./app/signin/page.tsx
import LoginForm from "./login-form";

export const metadata = { title: "Anmelden" };

export default async function SignInPage({
    searchParams,
}: Readonly<{
    searchParams: Promise<{ callbackUrl?: string | string[] }>;
}>) {
    const sp = await searchParams;
    const callbackUrl =
        Array.isArray(sp.callbackUrl) ? sp.callbackUrl[0] : sp.callbackUrl ?? "/";


    return (
        <main className="mx-auto max-w-sm py-10">
            <h1 className="text-2xl font-semibold mb-6">Anmeldung</h1>
            <LoginForm callbackUrl={callbackUrl} />
        </main>
    );
}
./app/layout.tsx
"use client";

import "./globals.css";
import HelloMsg from "@/components/hello-msg";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useState } from "react";
import { SessionProvider } from "next-auth/react";
import { AuthButton } from "@/components/auth-button";

const navItems = [
  { href: "/", label: "Radar" },
  { href: "/admin", label: "Admin" },
];

export default function RootLayout({ children }: { readonly children: React.ReactNode }) {
  const pathname = usePathname();
  const [menuOpen, setMenuOpen] = useState(false);

  return (
    <html lang="de">
      <body className="bg-gray-50 text-gray-900">
        <SessionProvider>
          <header className="bg-white shadow-sm sticky top-0 z-50">
            <nav className="mx-auto flex max-w-7xl items-center justify-between px-4 py-3">
              <Link href="/" className="text-xl font-bold text-cyan-600 hover:text-blue-700">

                üöÄ TechRadar
              </Link>

              <div className="hidden md:flex items-center space-x-6">
                {navItems.map((item) => (
                  <Link
                    key={item.href}
                    href={item.href}
                    className={`text-sm font-medium transition ${pathname === item.href
                      ? "text-blue-600 font-semibold"
                      : "text-gray-700 hover:text-blue-600"
                      }`}
                  >
                    {item.label}
                  </Link>
                ))}
                <AuthButton />
              </div>

              <button
                onClick={() => setMenuOpen(!menuOpen)}
                className="md:hidden inline-flex items-center justify-center rounded-md p-2 text-gray-600 hover:bg-gray-100 hover:text-gray-800 focus:outline-none"
                aria-label="Toggle navigation"
              >
                <svg className="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  {menuOpen ? (
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  ) : (
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                  )}
                </svg>
              </button>
            </nav>

            <HelloMsg />

            {menuOpen && (
              <div className="md:hidden border-t bg-white shadow-md">
                <div className="flex flex-col px-4 py-3 space-y-2">
                  {navItems.map((item) => (
                    <Link
                      key={item.href}
                      href={item.href}
                      onClick={() => setMenuOpen(false)}
                      className={`block rounded-md px-3 py-2 text-base font-medium transition ${pathname === item.href
                        ? "bg-blue-50 text-blue-700 font-semibold"
                        : "text-gray-700 hover:bg-gray-100 hover:text-blue-600"
                        }`}
                    >
                      {item.label}
                    </Link>
                  ))}
                  <AuthButton variant="mobile" onClickItem={() => setMenuOpen(false)} />
                </div>
              </div>
            )}
          </header>

          <main className="mx-auto max-w-7xl px-4 py-8">{children}</main>

          <footer className="mt-12 border-t py-6 text-center text-sm text-gray-500">
            ¬© {new Date().getFullYear()} ‚Äì Technology Radar
          </footer>
        </SessionProvider>
      </body>
    </html>
  );
}
./app/api/auth/[...nextauth]/route.tsx
export { GET, POST } from "@/auth";
./app/page.tsx
import { listPublishedTech } from "@/lib/radar";
import type { Technology, Ring, Category } from "@/lib/types";

function Badge({
    children,
    kind,
}: {
    children: React.ReactNode;
    kind: "ring" | "category";
}) {
    const base =
        "inline-flex items-center rounded-full px-2 py-0.5 text-xs font-medium";

    const ringStyles: Record<Ring, string> = {
        Adopt: "bg-emerald-100 text-emerald-700 ring-1 ring-emerald-200",
        Trial: "bg-sky-100 text-sky-700 ring-1 ring-sky-200",
        Assess: "bg-amber-100 text-amber-800 ring-1 ring-amber-200",
        Hold: "bg-rose-100 text-rose-700 ring-1 ring-rose-200",
    } as const;

    const categoryStyles: Record<Category, string> = {
        Techniques: "bg-indigo-100 text-indigo-700 ring-1 ring-indigo-200",
        Platforms: "bg-fuchsia-100 text-fuchsia-700 ring-1 ring-fuchsia-200",
        Tools: "bg-cyan-100 text-cyan-700 ring-1 ring-cyan-200",
        "Languages_Frameworks": "bg-violet-100 text-violet-700 ring-1 ring-violet-200",
    } as const;

    const text = String(children);
    const style =
        kind === "ring"
            ? ringStyles[text as Ring] ?? "bg-gray-100 text-gray-700 ring-1 ring-gray-200"
            : categoryStyles[text as Category] ??
            "bg-gray-100 text-gray-700 ring-1 ring-gray-200";

    return <span className={`${base} ${style}`}>{children}</span>;
}

function EmptyState() {
    return (
        <div className="rounded-2xl border border-dashed p-10 text-center text-gray-500">
            <div className="mx-auto mb-3 h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center">
                <span aria-hidden>üì≠</span>
            </div>
            <p className="font-medium">Noch keine publizierten Technologien</p>
            <p className="text-sm">Sobald etwas publiziert ist, erscheint es hier.</p>
        </div>
    );
}

function TechRow({ t }: { t: Technology }) {
    const date = t.publishedAt ? new Date(t.publishedAt).toLocaleDateString() : "‚Äî";
    return (
        <tr className="border-b last:border-0">
            <td className="px-4 py-3">
                <div className="font-medium text-gray-900">{t.name}</div>
                <div className="mt-1 line-clamp-2 text-sm text-gray-500">
                    {t.techDescription}
                </div>
            </td>
            <td className="px-4 py-3">
                <Badge kind="category">{t.category as Category}</Badge>
            </td>
            <td className="px-4 py-3">
                <Badge kind="ring">{t.ring as Ring}</Badge>
            </td>
            <td className="px-4 py-3">
                <div className="line-clamp-2 text-sm text-gray-700">
                    {t.classificationNote}
                </div>
            </td>
            <td className="px-4 py-3 text-sm text-gray-500">{date}</td>
        </tr>
    );
}

function TechCard({ t }: { t: Technology }) {
    const date = t.publishedAt ? new Date(t.publishedAt).toLocaleDateString() : "‚Äî";
    return (
        <article className="rounded-xl border bg-white p-4 shadow-sm">
            <header className="mb-2">
                <h3 className="text-lg font-semibold text-gray-900">{t.name}</h3>
                <p className="text-sm text-gray-500">{t.techDescription}</p>
            </header>

            <div className="mt-3 flex flex-wrap items-center gap-2">
                <Badge kind="category">{t.category as Category}</Badge>
                <Badge kind="ring">{t.ring as Ring}</Badge>
            </div>

            <dl className="mt-4 grid grid-cols-2 gap-x-4 gap-y-2 text-sm">
                <div>
                    <dt className="text-gray-500">Einordnung</dt>
                    <dd className="text-gray-800">{t.classificationNote ?? "‚Äî"}</dd>
                </div>
                <div>
                    <dt className="text-gray-500">Publiziert</dt>
                    <dd className="text-gray-800">{date}</dd>
                </div>
            </dl>
        </article>
    );
}

export default async function RadarPage() {
    const items = await listPublishedTech();

    return (
        <main className="mx-auto max-w-6xl px-4 py-8">
            <header className="mb-6 flex flex-col gap-2 sm:flex-row sm:items-end sm:justify-between">
                <div>
                    <h1 className="text-2xl font-semibold tracking-tight">Technology Radar</h1>
                    <p className="mt-1 text-sm text-gray-500">
                        Publizierte Technologien, gruppiert nach Kategorie &amp; Ring.
                    </p>
                </div>
            </header>

            <section className="overflow-hidden rounded-2xl border bg-white shadow-sm">
                {items.length === 0 ? (
                    <div className="p-8">
                        <EmptyState />
                    </div>
                ) : (
                    <>
                        <div className="md:hidden p-4">
                            <div className="grid grid-cols-1 gap-4">
                                {items.map((t: Technology) => (
                                    <TechCard key={t.id} t={t} />
                                ))}
                            </div>
                        </div>

                        <div className="hidden md:block overflow-x-auto w-full">
                            <table className="w-full table-fixed border-separate border-spacing-0">
                                <colgroup><col className="w-2/5" /><col className="w-1/5" /><col className="w-1/6" /><col className="w-1/4" /><col className="w-28" /></colgroup>
                                <thead className="bg-gray-50 text-left text-sm text-gray-600">
                                    <tr className="border-b">
                                        <th className="px-4 py-3 font-medium">Technologie</th>
                                        <th className="px-4 py-3 font-medium">Kategorie</th>
                                        <th className="px-4 py-3 font-medium">Ring</th>
                                        <th className="px-4 py-3 font-medium">Einordnung</th>
                                        <th className="px-4 py-3 font-medium">Publiziert</th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white">
                                    {items.map((t: Technology) => (
                                        <TechRow key={t.id} t={t} />
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    </>
                )}
            </section>

            <p className="mt-3 text-xs text-gray-500">
                Tipp: Auf kleineren Screens siehst du Kacheln; ab Desktop wieder die Tabelle.
            </p>
        </main>
    );
}
./components
./components/hello-msg.tsx
import { useSession } from "next-auth/react"

export default function HelloMsg() {
    const { data: session } = useSession()
    const centerText = session ? `Hello, ${session.user?.name}!` : null

    if (!centerText) {
        return null
    }

    return (
        <div className="border-t bg-white/95 backdrop-blur supports-[backdrop-filter]:bg-white/70">
            <div className="mx-auto max-w-7xl px-4 py-2 text-center text-sm text-gray-700">
                {centerText}
            </div>
        </div>
    )
}
./components/auth-button.tsx
import Link from "next/link";
import { useSession, signOut } from "next-auth/react";

export function AuthButton({
    variant = "desktop",
    onClickItem,
}: Readonly<{
    variant?: "desktop" | "mobile";
    onClickItem?: () => void;
}>) {
    const { data: session, status } = useSession();

    const base =
        variant === "desktop"
            ? "rounded-md px-4 py-2 text-sm font-semibold transition"
            : "block rounded-md px-3 py-2 text-base font-semibold transition";

    if (status === "loading") {
        return (
            <span className={variant === "desktop" ? "px-4 py-2 text-sm" : "px-3 py-2 text-base"}>
                ‚Ä¶
            </span>
        );
    }

    return session ? (
        <button
            onClick={async () => {
                await signOut({ callbackUrl: "/" });
                onClickItem?.();
            }}
            className={`${base} bg-blue-600 text-white hover:bg-blue-700`}
        >
            Logout
        </button>
    ) : (
        <Link
            href="/signin"
            onClick={onClickItem}
            className={`${base} bg-blue-600 text-white hover:bg-blue-700`}
        >
            Login
        </Link>
    );
}
./lib/prisma.ts
import { PrismaClient } from "@prisma/client";
const g = globalThis as unknown as { prisma?: PrismaClient };

export const prisma =
  g.prisma ??
  new PrismaClient({
    log: process.env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],
  });

if (process.env.NODE_ENV !== "production") g.prisma = prisma;

./lib/radar.tsx
import { prisma } from "@/lib/prisma";
import { Prisma, Category, Ring, Status, Technology } from "@prisma/client";

// ####################################################
// Root Page
// ####################################################

export async function listPublishedTech() {
    return prisma.technology.findMany({
        where: { status: Status.Published },
        orderBy: [{ publishedAt: "desc" }, { name: "asc" }],
    });
}

// ####################################################
// /admin/new
// ####################################################

export async function createTechDraft(input: {
    name: string;
    category: Category;
    ring: Ring
    techDescription: string;
    classificationNote?: string;
}) {
    return prisma.technology.create({
        data: {
            name: input.name,
            category: input.category,
            ring: input.ring,
            techDescription: input.techDescription,
            classificationNote: input.classificationNote,
            status: Status.Draft,
        },
    });
}

// ####################################################
// /admin/publish
// ####################################################
export async function listDraftTech() {
    return prisma.technology.findMany({
        where: { status: Status.Draft },
        orderBy: [{ createdAt: "desc" }, { name: "asc" }],
    });
}

export async function publishTech(id: string) {
    return prisma.technology.update({
        where: { id },
        data: {
            status: Status.Published,
            publishedAt: new Date(),
        },
    });
}

export async function publishAllDrafts() {
    return prisma.technology.updateMany({
        where: { status: Status.Draft },
        data: {
            status: Status.Published,
            publishedAt: new Date(),
        },
    });
}

// ####################################################
// ####################################################

type TechnologyUpdateData = Parameters<typeof prisma.technology.update>[0]["data"];

export function getTechById(id: string) {
    return prisma.technology.findUnique({ where: { id } });
}

export function listAllTech(query?: string) {
    const queryTrim = (query ?? "").trim();
    const queryLower = queryTrim.toLowerCase();

    if (!queryLower) {
        return prisma.technology.findMany({
            orderBy: [{ status: "asc" }, { publishedAt: "desc" }, { name: "asc" }],
        });
    }

    const caseInsensitive = (searchString: string) => ({
        contains: searchString,
        mode: "insensitive" as const,
    });

    const or: any[] = [
        { name: caseInsensitive(queryTrim) },
        { techDescription: caseInsensitive(queryTrim) },
        { classificationNote: caseInsensitive(queryTrim) },
    ];

    const categoryMatches = Object.values(Category).filter((category) =>
        String(category).toLowerCase().includes(queryLower)
    );
    if (categoryMatches.length) or.push({ category: { in: categoryMatches } });

    const ringMatches = Object.values(Ring).filter((ring) =>
        String(ring).toLowerCase().includes(queryLower)
    );
    if (ringMatches.length) or.push({ ring: { in: ringMatches } });

    return prisma.technology.findMany({
        where: { OR: or },
        orderBy: [{ status: "asc" }, { publishedAt: "desc" }, { name: "asc" }],
    });
}


export async function updateTechSmart(id: string, data: TechnologyUpdateData) {
    const before = await getTechById(id);
    if (!before) throw new Error("Eintrag nicht gefunden.");

    const raw = (data as any).status;
    const targetStatus: Status = raw ? (typeof raw === "string" ? raw : raw.set) : before.status;

    const patch: TechnologyUpdateData = {};
    if (before.status !== targetStatus) {
        (patch as any).publishedAt =
            targetStatus === Status.Published ? before.publishedAt ?? new Date() : null;
    }

    return prisma.technology.update({ where: { id }, data: { ...data, ...patch } });
}

export function isPublishable(t: { ring?: any; classificationNote?: string | null }) {
    return !!t.ring && !!(t.classificationNote && t.classificationNote.trim());
}./lib/types.tsx
export type Category = "Techniques" | "Platforms" | "Tools" | "Languages_Frameworks";
export type Ring = "Assess" | "Trial" | "Adopt" | "Hold";

export type Technology = {
    id: string;
    name: string;
    category: Category;
    ring: Ring | null; // auch null, weil optional bei Drafts
    techDescription: string; // auch null, weil optional bei Drafts
    classificationNote: string | null; // auch null, weil optional bei Drafts
    publishedAt: Date | null; // auch null, weil nicht vorhanden bei Drafts
};
./auth.ts
import NextAuth, { type NextAuthConfig } from "next-auth";
import Credentials from "next-auth/providers/credentials";
import { z } from "zod";
import bcrypt from "bcryptjs";

const users = [
    {
        id: "1",
        name: "Alice Admin",
        email: "alice@example.com",
        // hash von "alice123"
        passwordHash: "$2b$10$k0099sebzzlY5/97bbKbAOegfpwHRIS6U83U2v0mQzFuU489W.Ff.",
        role: "admin",
    },
    {
        id: "2",
        name: "Bob User",
        email: "bob@example.com",
        // hash von "bob12345"
        passwordHash: "$2b$10$3C4iZeG3eOosP.r3eKohHusTeQaaOYMrsWIrEBOeqcBxHXf4JfBbO",
        role: "user",
    },
] as const;

const CredentialsSchema = z.object({
    email: z.string().email(),
    password: z.string().min(1),
});

export const authConfig: NextAuthConfig = {
    secret: process.env.NEXTAUTH_SECRET,
    pages: { signIn: "/signin" },
    session: { strategy: "jwt" },
    providers: [
        Credentials({
            name: "Credentials",
            credentials: {
                email: { label: "Email", type: "email" },
                password: { label: "Passwort", type: "password" },
            },
            async authorize(creds) {
                const parsed = CredentialsSchema.safeParse(creds);
                if (!parsed.success) return null;

                const { email, password } = parsed.data;
                const u = users.find(x => x.email.toLowerCase() === email.toLowerCase());
                if (!u) return null;

                const ok = await bcrypt.compare(password, u.passwordHash);
                if (!ok) return null;

                return { id: u.id, name: u.name, email: u.email, role: u.role };
            },
        }),
    ],
    callbacks: {
        async jwt({ token, user }) {
            if (user) token.role = (user as any).role;
            return token;
        },
        async session({ session, token }) {
            if (session.user) (session.user as any).role = token.role;
            return session;
        },
        authorized({ auth, request }) {
            const path = request.nextUrl.pathname;
            if (path.startsWith("/admin")) {
                return !!auth?.user && (auth.user as any).role === "admin";
            }
            if (path.startsWith("/test")) return !!auth?.user;
            return true;
        },
    },
};

export const {
    handlers: { GET, POST },
    auth,
    signIn,
    signOut,
} = NextAuth(authConfig);
./middleware.tsx
export { auth as middleware } from "@/auth";
export const config = {
    matcher: [
        "/admin/:path*",
        "/api/admin/:path*",
    ]
};
